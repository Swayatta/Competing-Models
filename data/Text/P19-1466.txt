Learning Attention-based Embeddings for Relation Prediction in

Knowledge Graphs

Deepak Nathani∗
Manohar Kaul
{deepakn1019,chauhanjatin100,charusharma1991}@gmail.com,

Department of Computer Science and Engineering, IIT Hyderabad

Jatin Chauhan∗

Charu Sharma∗

mkaul@iith.ac.in

Abstract

The recent proliferation of knowledge graphs
(KGs) coupled with incomplete or partial in-
formation, in the form of missing relations
(links) between entities, has fueled a lot of
research on knowledge base completion (also
known as relation prediction).
Several re-
cent works suggest that convolutional neural
network (CNN) based models generate richer
and more expressive feature embeddings and
hence also perform well on relation prediction.
However, we observe that these KG embed-
dings treat triples independently and thus fail
to cover the complex and hidden information
that is inherently implicit in the local neighbor-
hood surrounding a triple. To this effect, our
paper proposes a novel attention-based feature
embedding that captures both entity and rela-
tion features in any given entity’s neighbor-
hood. Additionally, we also encapsulate re-
lation clusters and multi-hop relations in our
model. Our empirical study offers insights
into the efﬁcacy of our attention-based model
and we show marked performance gains in
comparison to state-of-the-art methods on all
datasets.
Introduction

1
Knowledge graphs (KGs) represent knowledge
bases (KBs) as a directed graph whose nodes and
edges represent entities and relations between en-
tities, respectively. For example, in Figure 1,
a triple (London, capital of, United Kingdom) is
represented as two entities: London and United
Kingdom along with a relation (capital of) linking
them. KGs ﬁnd uses in a wide variety of applica-
tions such as semantic search (Berant et al., 2013;
Berant and Liang, 2014), dialogue generation (He
et al., 2017; Keizer et al., 2017), and question an-
swering (Zhang et al., 2016; Diefenbach et al.,
2018), to name a few. However, KGs typically
∗ Equal Contribution

suffer from missing relations (Socher et al., 2013a;
West et al., 2014). This problem gives rise to the
task of knowledge base completion (also referred
to as relation prediction), which entails predicting
whether a given triple is valid or not.

State-of-the-art relation prediction methods are
known to be primarily knowledge embedding
based models. They are broadly classiﬁed as
translational models (Bordes et al., 2013; Yang
et al., 2015; Trouillon et al., 2016) and convo-
lutional neural network (CNN) (Nguyen et al.,
2018; Dettmers et al., 2018) based models. While
translational models learn embeddings using sim-
ple operations and limited parameters, they pro-
duce low quality embeddings. In contrast, CNN
based models learn more expressive embeddings
due to their parameter efﬁciency and consideration
of complex relations. However, both translational
and CNN based models process each triple inde-
pendently and hence fail to encapsulate the seman-
tically rich and latent relations that are inherently
present in the vicinity of a given entity in a KG.

Motivated by the aforementioned observa-
tions, we propose a generalized attention-based
graph embedding for relation prediction.
For
node classiﬁcation, graph attention networks
(GATs) (Veliˇckovi´c et al., 2018) have been shown
to focus on the most relevant portions of the graph,
namely the node features in a 1-hop neighborhood.
Given a KG and the task of relation prediction, our
model generalizes and extends the attention mech-
anism by guiding attention to both entity (node)
and relation (edge) features in a multi-hop neigh-
borhood of a given entity / node.

Our idea is: 1) to capture multi-hop rela-
tions (Lin et al., 2015) surrounding a given node,
2) to encapsulate the diversity of roles played by
an entity in various relations, and 3) to consol-
idate the existing knowledge present in seman-
tically similar relation clusters (Valverde-Rebaza

Proceedingsofthe57thAnnualMeetingoftheAssociationforComputationalLinguistics,pages4710–4723Florence,Italy,July28-August2,2019.c(cid:13)2019AssociationforComputationalLinguistics4710and de Andrade Lopes, 2012). Our model achieves
these objectives by assigning different weight
mass (attention) to nodes in a neighborhood and
by propagating attention via layers in an iterative
fashion. However, as the model depth increases,
the contribution of distant entities decreases ex-
ponentially. To resolve this issue, we use re-
lation composition as proposed by (Lin et al.,
2015) to introduce an auxiliary edge between n-
hop neighbors, which then readily allows the ﬂow
of knowledge between entities. Our architecture is
an encoder-decoder model where our generalized
graph attention model and ConvKB (Nguyen et al.,
2018) play the roles of an encoder and decoder, re-
spectively. Moreover, this method can be extended
for learning effective embeddings for Textual En-
tailment Graphs (Kotlerman et al., 2015), where
global learning has proven effective in the past as
shown by (Berant et al., 2015) and (Berant et al.,
2010).

Our contributions are as follows. To the best
of our knowledge, we are the ﬁrst to learn new
graph attention based embeddings that speciﬁcally
target relation prediction on KGs. Secondly, we
generalize and extend graph attention mechanisms
to capture both entity and relation features in a
multi-hop neighborhood of a given entity. Fi-
nally, we evaluate our model on challenging re-
lation prediction tasks for a wide variety of real-
world datasets. Our experimental results indicate
a clear and substantial improvement over state-
of-the-art relation prediction methods. For in-
stance, our attention-based embedding achieves
an improvement of 104% over the state-of-the-art
method for the Hits@1 metric on the popular Free-
base (FB15K-237) dataset.

The rest of the paper is structured as follows.
We ﬁrst provide a review of related work in Sec-
tion 2 and then our detailed approach in Section 3.
Experimental results and dataset descriptions are
reported in Section 4 followed by our conclusion
and future research directions in Section 5.

2 Related Work

Recently, several variants of KG embeddings have
been proposed for relation prediction.
These
methods can be broadly classiﬁed as: (i) composi-
tional, (ii) translational, (iii) CNN based, and (iv)
graph based models.

RESCAL (Nickel et al., 2011), NTN (Socher
et al., 2013b), and the Holographic embedding

Figure 1: Subgraph of a knowledge graph contains ac-
tual relations between entities (solid lines) and inferred
relations that are initially hidden (dashed lines).

model (HOLE) (Nickel et al., 2016) are examples
of compositional based models. Both RESCAL
and NTN use tensor products which capture rich
interactions, but require a large number of parame-
ters to model relations and are thus cumbersome to
compute. To combat these drawbacks, HOLE cre-
ates more efﬁcient and scalable compositional rep-
resentations using the circular correlation of entity
embeddings.

In comparison,

translational models

like
TransE (Bordes et al., 2013), DISTMULT (Yang
et al., 2015) and ComplEx (Trouillon et al., 2016)
propose arguably simpler models. TransE consid-
ers the translation operation between head and tail
entities for relations. DISTMULT (Yang et al.,
2015) learns embeddings using a bilinear diago-
nal model which is a special case of the bilinear
objective used in NTN and TransE. DISTMULT
uses weighted element-wise dot products to model
entity relations. ComplEx (Trouillon et al., 2016)
generalizes DISTMULT (Yang et al., 2015) by
using complex embeddings and Hermitian dot
products instead. These translational models are
faster, require fewer parameters and are relatively
easier to train, but result in less expressive KG
embeddings.
Recently,

two CNN based models have
been proposed for relation prediction, namely
ConvE (Dettmers
and Con-
vKB (Nguyen et al., 2018). ConvE uses 2-D
convolution over embeddings to predict
links.
It comprises of a convolutional
layer, a fully
connected projection layer and an inner product
layer for the ﬁnal predictions. Different feature
maps are generated using multiple ﬁlters to ex-
tract global relationships. Concatenation of these
feature maps represents an input triple. These
models are parameter efﬁcient but consider each
triple independently without taking into account
the relationships between the triples.

et

al., 2018)

4711ChristopherNolanRevenantTom HardyLeonardoDiCaprioUnitedKingdomLondonJonathan  Nolancolleagueborn_innationality?colleague? acted_inacted_inborn_in?capital_ofdirectedcolleaguebrother_ofA graph based neural network model called
R-GCN (Schlichtkrull et al., 2018) is an exten-
sion of applying graph convolutional networks
(GCNs) (Kipf and Welling, 2017) to relational
data.
It applies a convolution operation to the
neighborhood of each entity and assigns them
equal weights. This graph based model does not
outperform the CNN based models.

Existing methods either learn KG embeddings
by solely focusing on entity features or by taking
into account the features of entities and relations in
a disjoint manner. Instead, our proposed graph at-
tention model holistically captures multi-hop and
semantically similar relations in the n-hop neigh-
borhood of any given entity in the KG.

3 Our Approach

We begin this section by introducing the notations
and deﬁnitions used in the rest of the paper, fol-
lowed by a brief background on graph attention
networks (GATs) (Veliˇckovi´c et al., 2018). Fi-
nally, we describe our proposed attention archi-
tecture for knowledge graphs followed by our de-
coder network.

3.1 Background
A knowledge graph is denoted by G = (E, R),
where E and R represent
the set of entities
(nodes) and relations (edges), respectively. A
triple (es, r, eo) is represented as an edge r be-
tween nodes es and er in G1. Embedding models
try to learn an effective representation of entities,
relations, and a scoring function f, such that for
a given input triple t = (es, r, eo), f (t) gives the
likelihood of t being a valid triple. For example,
Figure 1 shows the subgraph from a KG which
infers missing links represented by dashed lines
using existing triples such as (London, captial of,
United Kingdom).

3.2 Graph Attention Networks (GATs)
Graph convolutional networks (GCNs) (Kipf and
Welling, 2017) gather information from the en-
tity’s neighborhood and all neighbors contribute
equally in the information passing.
To ad-
(Veliˇckovi´c
dress the shortcomings of GCNs,
et al., 2018) introduced graph attention networks
(GATs). GATs learn to assign varying levels of
importance to nodes in every node’s neighbor-

1 From here onwards, the pairs “node / entity” and “edge /
relation” will be used interchangeably

hood, rather than treating all neighboring nodes
with equal importance, as is done in GCN.
The input feature set of nodes to a layer is x =
{(cid:126)x1, (cid:126)x2, ..., (cid:126)xN}. A layer produces a transformed
set of node feature vectors x(cid:48) = {(cid:126)x(cid:48)
N},
where (cid:126)xi and (cid:126)x(cid:48)
i are input and output embed-
dings of the entity ei, and N is number of entities
(nodes). A single GAT layer can be described as

2, ..., (cid:126)x(cid:48)

1, (cid:126)x(cid:48)

eij = a(W (cid:126)xi, W (cid:126)xj)

(1)

where eij is the attention value of the edge (ei, ej)
in G, W is a parametrized linear transformation
matrix mapping the input features to a higher di-
mensional output feature space, and a is any atten-
tion function of our choosing.

(cid:48)

Attention values for each edge are the impor-
tance of the edge (ei, ej)
s features for a source
node ei. Here, the relative attention αij is com-
puted using a softmax function over all the val-
ues in the neighborhood. Equation 2 shows the
output of a layer. GAT employs multi-head atten-
tion to stabilize the learning process as credited to
(Vaswani et al., 2017).

(cid:33)

(cid:126)x(cid:48)
i = σ

αijW (cid:126)xj

(2)

(cid:32)(cid:88)

j∈Ni

(cid:32)(cid:88)

j∈Ni

σ

The multihead attention process of concatenating
K attention heads is shown as follows in Equation
3.

(cid:33)

ijWk (cid:126)xj
αk

(3)

K(cid:13)(cid:13)(cid:13)

k=1

(cid:126)x(cid:48)
i =

where (cid:107) represents concatenation, σ represents
any non-linear function, αk
ij are normalized atten-
tion coefﬁcients of edge (ei, ej) calculated by the
k-th attention mechanism, and Wk represents the
corresponding linear transformation matrix of the
k-th attention mechanism. The output embedding
in the ﬁnal layer is calculated using averaging, in-
stead of the concatenation operation, to achieve
multi-head attention, as is shown in the following
Equation 4.

(cid:32)

(cid:126)x(cid:48)
i = σ

1
K

K(cid:88)

(cid:88)

k=1

j∈Ni

(cid:33)

ijWk (cid:126)xj
αk

(4)

3.3 Relations are Important
Despite the success of GATs, they are unsuitable
for KGs as they ignore relation (edge) features,

4712Figure 2: This ﬁgure shows the aggregation process
of our graph attentional layer. αij represents relative
attention values of the edge. The dashed lines represent
an auxiliary edge from a n-hop neighbors, in this case
n = 2.

which are an integral part of KGs. In KGs, enti-
ties play different roles depending on the relation
they are associated with. For example, in Figure
1, entity Christopher Nolan appears in two differ-
ent triples assuming the roles of a brother and a
director. To this end, we propose a novel embed-
ding approach to incorporate relation and neigh-
boring node features in the attention mechanism.
We deﬁne a single attentional layer, which is the
building block of our model. Similar to GAT, our
framework is agnostic to the particular choice of
attention mechanism.

Each layer in our model takes two embedding
matrices as input. Entity embeddings are repre-
sented by a matrix H ∈ RNe×T , where the i-th
row is the embedding of entity ei, Ne is the total
number of entities, and T is the feature dimension
of each entity embedding. With a similar construc-
tion, the relation embeddings are represented by a
matrix G ∈ RNr×P . The layer then outputs the
corresponding embedding matrices, H(cid:48) ∈ RNe×T (cid:48)
and G(cid:48) ∈ RNr×P (cid:48)

.

In order to obtain the new embedding for an
entity ei, a representation of each triple associ-
ated with ei is learned. We learn these embed-
dings by performing a linear transformation over
the concatenation of entity and relation feature
vectors corresponding to a particular triple tk
ij =
(ei, rk, ej), as is shown in Equation 5. This oper-
ation is also illustrated in the initial block of Fig-
ure 4.

(cid:126)cijk = W1[(cid:126)hi(cid:107)(cid:126)hj(cid:107)(cid:126)gk]

(5)

where (cid:126)cijk is the vector representation of a triple
ij. Vectors (cid:126)hi, (cid:126)hj, and (cid:126)gk denote embeddings of
tk
entities ei, ej and relation rk, respectively. Addi-
tionally, W1 denotes the linear transformation ma-
trix. Similar to (Veliˇckovi´c et al., 2018), we learn

Figure 3: Attention Mechanism

the importance of each triple tk
ij denoted by bijk.
We perform a linear transformation parameterized
by a weight matrix W2 followed by application of
the LeakyRelu non-linearity to get the absolute at-
tention value of the triple (Equation 6).
W2cijk

bijk = LeakyReLU

(cid:16)

(cid:17)

(6)

To get the relative attention values softmax is ap-
plied over bijk as shown in Equation 7. Figure 3
shows the computation of relative attention values
αijk for a single triple.

αijk = softmaxjk(bijk)

(7)

(cid:80)

=

(cid:80)

exp(bijk)
r∈Rin

n∈Ni

exp(binr)

where Ni denotes the neighborhood of entity ei
and Rij denotes the set of relations connecting en-
tities ei and ej. The new embedding of the entity
ei is the sum of each triple representation weighted
by their attention values as shown in Equation 8.

(cid:32)(cid:88)

(cid:88)

j∈Ni

k∈Rij

(cid:126)h(cid:48)
i = σ

(cid:33)

(cid:33)

αijk (cid:126)cijk

(8)

As suggested by (Veliˇckovi´c et al., 2018), multi-
head attention which was ﬁrst
introduced by
(Vaswani et al., 2017), is used to stabilize the
learning process and encapsulate more informa-
tion about the neighborhood. Essentially, M in-
dependent attention mechanisms calculate the em-
beddings, which are then concatenated, resulting
in the following representation:

M(cid:13)(cid:13)(cid:13)

m=1

(cid:32)(cid:88)

j∈Ni

σ

(cid:126)h(cid:48)
i =

αm
ijkcm
ijk

(9)

4713U.S.ChevroletEthanHorvathBarackObamaWashingtonD.C Samuel  L.JacksonMichelleObamawife_ofpresident_ofplays_forbrand_ofcapital_ofborn_innative_ofﬁrst_ladyαi1αi2αi3αi4αi5αi6eisoftmaxαijhihjgkFigure 4: This ﬁgure shows end-to-end architecture of our model. Dashed arrows in the ﬁgure represent concate-
nation operation. Green circles represents initial entity embedding vectors and yellow circles represents initial
relation embedding vectors.

This is the graph attention layer shown in Fig-
ure 4. We perform a linear transformation on in-
put relation embedding matrix G, parameterized
by a weight matrix WR ∈ RT×T (cid:48)
, where T (cid:48) is
the dimensionality of output relation embeddings
(Equation 10).

G(cid:48) = G.WR

(10)

In the ﬁnal layer of our model, instead of concate-
nating the embeddings from multiple heads we
employ averaging to get ﬁnal embedding vectors
for entities as shown in Equation 11.

(cid:32)

(cid:126)h(cid:48)
i = σ

1
M

M(cid:88)

(cid:88)

(cid:88)

m=1

j∈Ni

k∈Rij

(cid:33)

αm
ijkcm
ijk

(11)

However, while learning new embeddings, entities
lose their initial embedding information. To re-
solve this issue, we linearly transform Hi to obtain
Ht using a weight matrix WE ∈ RT i×T f , where
Hi represents the input entity embeddings to our
model, Ht represents the transformed entity em-
beddings, T i denotes the dimension of an initial
entity embedding, and T f denotes the dimension
of the ﬁnal entity embedding. We add this ini-
tial entity embedding information to the entity em-
beddings obtained from the ﬁnal attentional layer,
Hf ∈ RNe×T f as shown in Equation 12.

H(cid:48)(cid:48) = WEHt + Hf

(12)

In our architecture, we extend the notion of an
edge to a directed path by introducing an aux-
iliary relation for n-hop neighbors between two
entities. The embedding of this auxiliary rela-
tion is the summation of embeddings of all the

relations in the path. Our model iteratively ac-
cumulates knowledge from distant neighbors of
an entity. As illustrated in ﬁgure 2, in the ﬁrst
layer of our model, all entities capture informa-
tion from their direct in-ﬂowing neighbors. In the
second layer, U.S gathers information from en-
tities Barack Obama, Ethan Horvath, Chevrolet,
and Washington D.C, which already possess infor-
mation about their neighbors Michelle Obama and
Samuel L. Jackson, from a previous layer. In gen-
eral, for a n layer model the incoming informa-
tion is accumulated over a n-hop neighborhood.
The aggregation process to learn new entity em-
beddings and the introduction of an auxiliary edge
between n-hop neighbors is also shown in Figure
2. We normalize the entity embeddings after every
generalized GAT layer and prior to the ﬁrst layer,
for every main iteration.

3.4 Training Objective
Our model borrows the idea of a translational
scoring function from (Bordes et al., 2013), which
learns embeddings such that for a given valid triple
ij = (ei, rk, ej), the condition (cid:126)hi+(cid:126)gk ≈ (cid:126)hj holds,
tk
i.e., ej is the nearest neighbor of ei connected via
relation rk. Speciﬁcally, we try to learn entity and
relation embeddings to minimize the L1-norm dis-
similarity measure given by dtij = (cid:107) (cid:126)hi+ (cid:126)gk− (cid:126)hj(cid:107)1.
We train our model using hinge-loss which is

given by the following expression

L(Ω) =

max{dt(cid:48)

ij

− dtij + γ, 0} (13)

(cid:88)

(cid:88)

tij∈S

ij∈S(cid:48)
t(cid:48)

where γ > 0 is a margin hyper-parameter, S is the
set of valid triples, and S(cid:48) denotes the set of invalid

4714Graph Attention  Layer 1 Triple NChristian Baleacted_inThe MachinistTriple 1Barack Obamapresident_ofUnited StatesAttentionHead 1 AttentionHead 2 Graph AttentionLayer 2 TrainingLoss triples, given formally as
(cid:123)(cid:122)
(cid:125)
i ∈ E \ ei}
i(cid:48)j | e(cid:48)
S(cid:48) = {tk

(cid:124)

replace head entity

(cid:124)

∪{tk

ij(cid:48) | e(cid:48)

(cid:123)(cid:122)
(cid:125)
j ∈ E \ ej}

replace tail entity

3.5 Decoder
Our model uses ConvKB (Nguyen et al., 2018) as
a decoder. The aim of the convolutional layer is
to analyze the global embedding properties of a
triple tk
ij across each dimension and to generalize
the transitional characteristics in our model. The
score function with multiple feature maps can be
written formally as:

f (tk

ij) =

ReLU([(cid:126)hi, (cid:126)gk, (cid:126)hj] ∗ ωm)

.W

(cid:32) Ω(cid:13)(cid:13)(cid:13)

m=1

(cid:33)

ij∈{S∪S(cid:48)}
tk

(cid:40)

where ωm represents the mth convolutional ﬁlter,
Ω is a hyper-parameter denoting number of ﬁlters
used, ∗ is a convolution operator, and W ∈ RΩk×1
represents a linear transformation matrix used to
compute the ﬁnal score of the triple. The model is
trained using soft-margin loss as
L =

(cid:88)

(cid:107)W(cid:107)2

log(1+exp(ltk

ij)))+

.f (tk

2

ij

λ
2

ij

=

where ltk

for tk
1
−1 for tk

ij ∈ S
ij ∈ S(cid:48)
4 Experiments and Results
4.1 Datasets
To evaluate our proposed method, we use ﬁve
benchmark datasets: WN18RR (Dettmers et al.,
2018), FB15k-237 (Toutanova et al., 2015),
NELL-995 (Xiong et al., 2017), Uniﬁed Medi-
cal Language Systems (UMLS) (Kok and Domin-
gos, 2007) and Alyawarra Kinship (Lin et al.,
2018). Previous works (Toutanova et al., 2015;
Dettmers et al., 2018) suggest that the task of
relation prediction in WN18 and FB15K suffers
from the problem of inverse relations, whereby
one can achieve state-of-the-art results using a
simple reversal rule based model, as shown by
(Dettmers et al., 2018). Therefore, correspond-
ing subset datasets WN18RR and FB15k-237 were
created to resolve the reversible relation problem
in WN18 and FB15K. We used the data splits pro-
vided by (Nguyen et al., 2018). Table 1 provides
statistics of all datasets used.

4.2 Training Protocol
We create two sets of invalid triples, each time re-
placing either the head or tail entity in a triple by
an invalid entity. We randomly sample equal num-
ber of invalid triples from both the sets to ensure
robust performance on detecting both head and tail
entity. Entity and relation embeddings produced
by TransE (Bordes et al., 2013; Nguyen et al.,
2018) are used to initialize our embeddings.

We follow a two-step training procedure, i.e.,
we ﬁrst train our generalized GAT to encode infor-
mation about the graph entities and relations and
then train a decoder model like ConvKB (Nguyen
et al., 2018) to perform the relation prediction task.
The original GAT update Equation 3 only aggre-
gates information passed from 1-hop neighbor-
hood, while our generalized GAT uses informa-
tion from the n-hop neighborhood. We use auxil-
iary relations to aggregate more information about
the neighborhood in sparse graphs. We use Adam
to optimize all the parameters with initial learn-
ing rate set at 0.001. Both the entity and relation
embeddings of the ﬁnal layer are set to 200. The
optimal hyper-parameters set for each dataset are
mentioned in our supplementary section.

4.3 Evaluation Protocol
In the relation prediction task, the aim is to predict
a triple (ei, rk, ej) with ei or ej missing, i.e., pre-
dict ei given (rk, ej) or predict ej given (ei, rk).
We generate a set of (N − 1) corrupt triples for
each entity ei by replacing it with every other en-
(cid:48) ∈ E \ ei, then we assign a score to each
tity ei
such triple. Subsequently, we sort these scores
in ascending order and get the rank of a correct
triple (ei, rk, ej). Similar to previous work ((Bor-
des et al., 2013), (Nguyen et al., 2018), (Dettmers
et al., 2018)), we evaluate all the models in a ﬁl-
tered setting, i.e, during ranking we remove cor-
rupt triples which are already present in one of the
training, validation, or test sets. This whole pro-
cess is repeated by replacing the tail entity ej, and
averaged metrics are reported. We report mean
reciprocal rank (MRR), mean rank (MR) and the
proportion of correct entities in the top N ranks
(Hits@N) for N = 1, 3, and 10.

4.4 Results and Analysis
Tables 2 and 3 present the prediction results on
the test sets of all
The results
clearly demonstrate that our proposed method2
2 Our work

the datasets.

4715Dataset
WN18RR
FB15k-237
NELL-995
Kinship
UMLS

# Entities
40,943
14,541
75,492

104
135

# Relations

11
237
200
25
46

Training
86,835
272,115
149,678

8544
5216

# Edges

Validation

3034
17,535

543
1068
652

Test
3134
20,466
3992
1074
661

Total
93,003
310,116
154,213
10,686
6529

Mean in-degree

Median in-degree

2.12
18.71
1.98
82.15
38.63

1
8
0

82.5
20

Table 1: Dataset statistics

WN18RR

Hits@N

FB15K-237

Hits@N

MR MRR @1 @3 @10 MR MRR @1 @3 @10

DistMult (Yang et al., 2015)
ComplEx (Trouillon et al., 2016)
ConvE (Dettmers et al., 2018)
TransE (Bordes et al., 2013)
ConvKB (Nguyen et al., 2018)
R-GCN (Schlichtkrull et al., 2018) 6700 0.123
Our work

50.4
7000 0.444 41.2
47
7882 0.449 40.9 46.9
53
4464 0.456 41.9
53.1
47
2300 0.243 4.27 44.1 53.2
1295 0.265 5.82 44.5 55.8
13.7 20.7
1940 0.440 36.1 48.3 58.1

8

512 0.281 19.9 30.1 44.6
546 0.278 19.4 29.7
45
245 0.312 22.5 34.1 49.7
323 0.279 19.8 37.6 44.1
216 0.289 19.8 32.4 47.1
30
600 0.164
210 0.518
62.6

18.1
54

10
46

Table 2: Experimental results on WN18RR and FB15K-237 test sets. Hits@N values are in percentage. The best
score is in bold and second best score is underlined.

NELL-995

Hits@N

Kinship

Hits@N

MR MRR @1 @3 @10

MR MRR @1 @3 @10

4213 0.485 40.1 52.4
61
DistMult (Yang et al., 2015)
4600 0.482 39.9 52.8 60.6
ComplEx (Trouillon et al., 2016)
3560 0.491 40.3 53.1 61.3
ConvE (Dettmers et al., 2018)
2100 0.401 34.4 47.2 50.1
TransE (Bordes et al., 2013)
600
47
ConvKB (Nguyen et al., 2018)
54.5
0.43
0.12
R-GCN (Schlichtkrull et al., 2018) 7600
12.6 18.8
0.530 44.7 56.4 69.5
Our work
965

37.0
8.2

36.7
73.3
73.8
0.9

5.26
2.48
2.03
6.8
3.3
25.92 0.109
1.94
0.904

58.1
86.7
0.516
89.9 97.11
0.823
91.7 98.14
0.833
64.3
84.1
0.309
95.3
0.614 43.62 75.5
23.9
8.8
94.1
98

3
85.9

Table 3: Experimental results on NELL-995 and Kinship test sets. Hits@N values are in percentage. The best
score is in bold and second best score is underlined.

signiﬁcantly outperforms state-of-the-art results
on ﬁve metrics for FB15k-237, and on two metrics
for WN18RR. We downloaded publicly available
source codes to reproduce results of the state-of-
the-art methods345678 on all the datasets.
Attention Values vs Epochs: We study the dis-
tribution of attention with increasing epochs for a
particular node. Figure 5 shows this distribution
on FB15k-237. In the initial stages of the learn-
ing process, the attention is distributed randomly.
As the training progresses and our model gathers
more information from the neighborhood, it as-
signs more attention to direct neighbors and takes
minor information from the more distant neigh-
bors. Once the model converges, it learns to gather
multi-hop and clustered relation information from
the n-hop neighborhood of the node.
PageRank Analysis: We hypothesize that com-
plex and hidden multi-hop relations among enti-
ties are captured more succinctly in dense graphs
3 TransE 4 DistMult
5 ComplEx 6 R-GCN 7 ConvE
8 ConvKB

as opposed to sparse graphs. To test this hypoth-
esis, we perform an analysis similar to ConvE,
where they study the correlation between mean
PageRank and increase in MRR relative to Dist-
Mult. We notice a strong correlation coefﬁcient
of r = 0.808. Table 4 indicates that when there
is an increase in PageRank values, there is also a
corresponding increase in MRR values. We ob-
serve an anomaly to our observed correlation in
case of NELL-995 versus WN18RR and attribute
this to the highly sparse and hierarchical struc-
ture of WN18RR which poses as a challenge to our
method that does not capture information in a top-
down recursive fashion.

4.5 Ablation Study
We carry out an ablation study on our model,
where we analyze the behavior of mean rank on a
test set when we omit path generalization (−PG),
i.e., removing n-hop information, and omit re-
lation Information (−Relations) from our model.
Figure 7 shows that our model performs better

4716(a) Epoch 0

(b) Epoch 1200

(c) Epoch 2400

Figure 5: Learning process of our model on FB15K-237 dataset. Y-axis represents attention values ×1e−5.

(a) Epoch 0
Figure 6: Learning process of our model on WN18RR dataset. Y-axis represents attention values ×1e−5

(b) Epoch 1800

(c) Epoch 3600

PageRank Relative Increase

Dataset
NELL-995
WN18RR
FB15k-237
UMLS
Kinship
Table 4: Mean PageRank ×10−5 vs relative increase in
MRR wrt. DistMult.

0.025
-0.01
0.237
0.247
0.388

1.32
2.44
6.87
740
961

than the two ablated models and we see a signiﬁ-
cant drop in the results when using ablated models
on NELL-995. Removing the relations from the
proposed model has a huge impact on the results
which suggests that the relation embeddings play
a pivotal role in relation prediction.

5 Conclusion and Future Work

In this paper, we propose a novel approach for
relation prediction. Our approach improves over
the state-of-the-art models by signiﬁcant margins.
Our proposed model learns new graph attention-
based embeddings that speciﬁcally cater to rela-
tion prediction on KGs. Additionally, we gener-
alize and extend graph attention mechanisms to
capture both entity and relation features in a multi-
hop neighborhood of a given entity. Our detailed

Figure 7: Epochs vs Mean Rank for our model and
two ablated models on NELL-995. −PG (green) rep-
resents the model after removing n-hop auxiliary rela-
tions or path generalization, −Relations (blue) repre-
sents model without taking relations into account and
Our model (red) represents the entire model.

and exhaustive empirical analysis gives more in-
sight into our method’s superiority for relation pre-
diction on KGs. The proposed model can be ex-
tended to learn embeddings for various tasks us-
ing KGs such as dialogue generation (He et al.,
2017; Keizer et al., 2017), and question answer-
ing (Zhang et al., 2016; Diefenbach et al., 2018).
In the future, we intend to extend our method to
better perform on hierarchical graphs and capture
higher-order relations between entities (like mo-

47171hop2hop3hopn-hop value10.8-11.510.1-10.89.48-10.18.81-9.488.14-8.81attention values ( X 1e-5 )0.00.20.40.60.81.01hop2hop3hopn-hop value17.4-20.614.3-17.411.1-14.38.02-11.14.88-8.02attention values ( X 1e-5 )0.00.20.40.60.81.01hop2hop3hopn-hop value17.3-20.314.3-17.311.3-14.38.39-11.35.41-8.39attention values ( X 1e-5 )0.00.20.40.60.81.01hop2hop3hopn-hop value255-269241-255228-241214-228200-214attention values ( X 1e-5 )0.00.20.40.60.81.01hop2hop3hopn-hop value691-827555-691419-555282-419146-282attention values ( X 1e-5 )0.00.20.40.60.81.01hop2hop3hopn-hop value383-448318-383253-318188-253122-188attention values ( X 1e-5 )0.00.20.40.60.81.010001500200025003000Epochs10002000300040005000Mean RankOur model-PG-Relationstifs) in our graph attention model.

Acknowledgments

We gratefully acknowledge
support of
NVIDIA Corporation with the donation of the
Titan Xp GPU used for this research.

the

